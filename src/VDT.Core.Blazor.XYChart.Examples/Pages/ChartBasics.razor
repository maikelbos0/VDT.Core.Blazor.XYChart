@page "/ChartBasics"

<h1>Chart basics</h1>

<p>
    An XY chart is composed of layers, each of which groups a number of data series and defines how they should be rendered. Currently, bar, line and area
    layers are supported, each of which can be either stacked or unstacked. The amount of data points shown is determined by the labels you've added to the
    chart itself, and while each layer type has a default spacing mode, you can override this on the chart level.
</p>

<div class="row">
    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label class="form-label">Layers</label>
        <Multiselect Items="AllLayerTypes" @bind-SelectedItems="LayerTypes" />
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label class="form-label" for="isStacked">Stack mode</label>
        <select class="form-select" id="isStacked" @onchange="args => IsStacked = bool.Parse(args.Value?.ToString()!)">
            <option value="false" selected="@(!IsStacked)">Unstacked</option>
            <option value="true" selected="@IsStacked">Stacked</option>
        </select>
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label class="form-label" for="labelCount">Label count</label>
        <input type="number" class="form-control" id="labelCount" @bind-value="@LabelCount" />
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label class="form-label" for="dataPointSpacingMode">Data point spacing mode</label>
        <select class="form-select" id="dataPointSpacingMode" @onchange="args => DataPointSpacingMode = Enum.Parse<DataPointSpacingMode>(args.Value?.ToString() ?? throw new InvalidOperationException())">
            <option value="@DataPointSpacingMode.Auto" selected="@(DataPointSpacingMode == DataPointSpacingMode.Auto)">Auto</option>
            <option value="@DataPointSpacingMode.Center" selected="@(DataPointSpacingMode == DataPointSpacingMode.Center)">Center</option>
            <option value="@DataPointSpacingMode.EdgeToEdge" selected="@(DataPointSpacingMode == DataPointSpacingMode.EdgeToEdge)">Edge to edge</option>
        </select>
    </div>
</div>

<div class="d-inline-block">
    <XYChart Labels="@(new List<string>() { "Foo", "Bar", "Baz", "Quux", "Quuux" }.Take(LabelCount).ToList())" DataPointSpacingMode="DataPointSpacingMode">
        <Canvas Height="500" Width="1000" XAxisLabelHeight="50" YAxisLabelWidth="75" Padding="25" />

        @if (LayerTypes.Contains(ChartLayerType.Area)) {
            <AreaLayer IsStacked="IsStacked">
                @foreach (var data in ExampleData.AreaData) {
                    <DataSeries Name="@data.Name" Color="@data.Color" DataPoints="data.DataPoints" />
                }
            </AreaLayer>
        }

        @if (LayerTypes.Contains(ChartLayerType.Bar)) {
            <BarLayer IsStacked="IsStacked">
                @foreach (var data in ExampleData.BarData) {
                    <DataSeries Name="@data.Name" Color="@data.Color" DataPoints="data.DataPoints" />
                }
            </BarLayer>
        }

        @if (LayerTypes.Contains(ChartLayerType.Line)) {
            <LineLayer IsStacked="IsStacked">
                @foreach (var data in ExampleData.LineData) {
                    <DataSeries Name="@data.Name" Color="@data.Color" DataPoints="data.DataPoints" />
                }
            </LineLayer>
        }
    </XYChart>


    <div class="text-end">
        (<a href="/SourceData">source data</a>)
    </div>
</div>

@code {
    private List<ChartLayerType> LayerTypes { get; set; } = new(Enum.GetValues<ChartLayerType>());
    private List<(ChartLayerType, string)> AllLayerTypes { get; } = Enum.GetValues<ChartLayerType>().Select(layerType => (layerType, layerType.ToString())).ToList();
    private bool IsStacked { get; set; } = false;
    private ushort LabelCount { get; set; } = 4;
    private DataPointSpacingMode DataPointSpacingMode { get; set; } = DataPointSpacingMode.Auto;

    private enum ChartLayerType {
        Bar,
        Line,
        Area
    }
}