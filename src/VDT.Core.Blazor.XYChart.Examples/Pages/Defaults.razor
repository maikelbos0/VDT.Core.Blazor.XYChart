@page "/Defaults"

<h1>Defaults</h1>

<p>
    It's possible to apply default values for parameters in almost all chart components by setting the static property corresponding to the parameter to the 
    desired value. To ensure these values are set before any charts are rendered it is best to apply these values in your startup. In the example below, 
    default canvas and legend dimensions are set.
</p>

<pre><code>
public class Program {
    public static async Task Main(string[] args) {
        var builder = WebAssemblyHostBuilder.CreateDefault(args);
        builder.RootComponents.Add&lt;App&gt;("#app");

        Canvas.DefaultWidth = 900;
        Canvas.DefaultHeight = 400;
        Legend.DefaultPosition = LegendPosition.Bottom;
        Legend.DefaultHeight = 50;

        await builder.Build().RunAsync();
    }
}
</code></pre>

<p>The only exception to this pattern is the <code>DataSeries</code> class; its parameters either have special rules or can not have a default applied:</p>

<ul>
    <li><code>DataSeries.Name</code> does not have a default, but can be null</li>
    <li>
        <code>DataSeries.Color</code> does not have a single default, but rather a list of defaults; if a data series doesn't have an assigned color it will be
        picked from this list by the index of the data series inside the entire chart, applying modulus if needed
    </li>
    <li>
        <code>DataSeries.DataPoints</code> does not have a default, but can be empty; in this case the empty values are either not shown or interpreted as zero
        depending on the layer type and settings
    </li>
    <li>
        <code>DataSeries.CssClass</code> does not have a default, but can be null; if you wish to apply styles across all data series elements you can use the
        built-in CSS classes as explained on the <a href="/Style">style</a> page
    </li>
</ul>