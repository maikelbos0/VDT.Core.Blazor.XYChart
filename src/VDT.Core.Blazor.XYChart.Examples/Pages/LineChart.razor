@page "/LineChart"
@using VDT.Core.Blazor.XYChart.Shapes;

<h1>Line chart</h1>

<p>
    A line chart is an XY chart with a line layer, in which the data is displayed as a series of points at positions corresponding to the data values,
    connected by lines. Line layers offer the customization parameters listed below.
</p>

<ul>
    <li><code>IsStacked</code> toggles stacking of data points; a stacked line layer stacks positive and negative values together</li>
    <li><code>ShowDataLabels</code> toggles visibility of labels with the value at each data point</li>
    <li><code>ShowDataMarkers</code> toggles visibility of the markers at the positions of the data points</li>
    <li><code>DataMarkerSize</code> is the size of the data markers</li>
    <li>
        <code>DataMarkerType</code> is the type of data marker to use; this library offers two types, but implementing your own is straight-forward as is
        explained below
        <ul>
            <li><code>DefaultDataMarkerTypes.Round</code> shows the data point as a circle</li>
            <li><code>DefaultDataMarkerTypes.Square</code> shows the data point as a square</li>
        </ul>
    </li>
    <li><code>DataLineMode</code> sets the visibility and type of lines connecting the positions of the data points</li>
</ul>

<p>
    If you want to have a different shape as a data marker, you can achieve this by implementing your own subclass of <code>Shapes.ShapeBase</code>. Make sure
    you call the base constructor with the <code>layerIndex</code>, <code>dataSeriesIndex</code> and <code>dataPointIndex</code> that get used to create a
    unique key for this shape. Return your desired CSS classes in your implementation of the <code>CssClass</code> property, the desired SVG element from
    <code>ElementName</code>, and return a <code>ShapeAttributeCollection</code> with attribute names and values from your <code>GetAttributes</code>
    implementation.
</p>

<p>
    After creating your shape, simply assign a lambda or other method that implements the <code>DataMarkerDelegate</code> delegate to the
    <code>DataMarkerType</code> property of your line layer. This delegate will provide your shape implementation with the data point coordinates, size, color,
    CSS class and aforementioned indexes.
</p>

<div class="row">
    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label class="form-label" for="isStacked">Stack mode</label>
        <select class="form-select" id="isStacked" @onchange="args => IsStacked = bool.Parse(args.Value?.ToString()!)">
            <option value="false" selected="@(!IsStacked)">Unstacked</option>
            <option value="true" selected="@IsStacked">Stacked</option>
        </select>
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label class="form-label" for="showDataLabels">Data labels</label>
        <select class="form-select" id="showDataLabels" @onchange="args => ShowDataLabels = bool.Parse(args.Value?.ToString()!)">
            <option value="true" selected="@ShowDataLabels">Show</option>
            <option value="false" selected="@(!ShowDataLabels)">Hide</option>
        </select>
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label class="form-label" for="showDataMarkers">Data markers</label>
        <select class="form-select" id="showDataMarkers" @onchange="args => ShowDataMarkers = bool.Parse(args.Value?.ToString()!)">
            <option value="true" selected="@ShowDataMarkers">Show</option>
            <option value="false" selected="@(!ShowDataMarkers)">Hide</option>
        </select>
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label class="form-label" for="dataMarkerSize">Data marker size</label>
        <input type="number" class="form-control" id="dataMarkerSize" @bind-value="@DataMarkerSize" />
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label class="form-label" for="dataMarkerType">Data marker type</label>
        <select class="form-select" id="dataMarkerType" @onchange="SetDataMarkerType">
            <option value="round" selected="@(DataMarkerType == DefaultDataMarkerTypes.Round)">Round</option>
            <option value="square" selected="@(DataMarkerType == DefaultDataMarkerTypes.Square)">Square</option>
            <option value="cross" selected="@(DataMarkerType == CrossDataMarkerShape.Delegate)">Cross (custom)</option>
        </select>
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label class="form-label" for="dataLineMode">Data lines</label>
        <select class="form-select" id="dataLineMode" @onchange="args => DataLineMode = Enum.Parse<DataLineMode>(args.Value?.ToString() ?? throw new InvalidOperationException())">
            <option value="@DataLineMode.Hidden" selected="@(DataLineMode == DataLineMode.Hidden)">Hidden</option>
            <option value="@DataLineMode.Straight" selected="@(DataLineMode == DataLineMode.Straight)">Straight</option>
            <option value="@DataLineMode.Smooth" selected="@(DataLineMode == DataLineMode.Smooth)">Smooth</option>
        </select>
    </div>
</div>

<div class="d-inline-block">
    <XYChart Labels="ExampleData.Labels">
        <LineLayer IsStacked="IsStacked" ShowDataLabels="ShowDataLabels" ShowDataMarkers="ShowDataMarkers" DataMarkerSize="DataMarkerSize" DataMarkerType="DataMarkerType" DataLineMode="DataLineMode">
            @foreach (var data in ExampleData.LineData) {
                <DataSeries Name="@data.Name" Color="@data.Color" DataPoints="data.DataPoints" />
            }
        </LineLayer>
    </XYChart>

    <div class="text-end">
        (<a href="/SourceData">source data</a>)
    </div>
</div>

@code {
    private class CrossDataMarkerShape : ShapeBase {
        public const string DefaultCssClass = "data-marker data-marker-cross";

        public static ShapeBase Delegate(decimal x, decimal y, decimal size, string color, string? cssClass, int layerIndex, int dataSeriesIndex, int dataPointIndex)
            => new CrossDataMarkerShape(x, y, size, color, cssClass, layerIndex, dataSeriesIndex, dataPointIndex);

        public override string ElementName => "path";
        public decimal X { get; }
        public decimal Y { get; }
        public decimal Size { get; }
        public string Color { get; }
        public override string CssClass { get; }

        public CrossDataMarkerShape(decimal x, decimal y, decimal size, string color, string? cssClass, int layerIndex, int dataSeriesIndex, int dataPointIndex) : base(layerIndex, dataSeriesIndex, dataPointIndex) {
            X = x;
            Y = y;
            Size = size;
            Color = color;
            CssClass = $"{DefaultCssClass} {cssClass}";
        }

        public override ShapeAttributeCollection GetAttributes() => new() {
            { "d", string.Join(" ", new[] {
                PathCommandFactory.MoveTo(X - Size / 2, Y - Size / 2),
                PathCommandFactory.LineTo(X + Size / 2, Y + Size / 2),
                PathCommandFactory.MoveTo(X - Size / 2, Y + Size / 2),
                PathCommandFactory.LineTo(X + Size / 2, Y - Size / 2)
            }) },
            { "stroke", Color },
            { "stroke-width", "2" }
        };
    }

    private bool IsStacked { get; set; } = false;
    private bool ShowDataLabels { get; set; } = false;
    private bool ShowDataMarkers { get; set; } = true;
    private decimal DataMarkerSize { get; set; } = 10M;
    private DataMarkerDelegate DataMarkerType { get; set; } = DefaultDataMarkerTypes.Round;
    private DataLineMode DataLineMode { get; set; } = DataLineMode.Straight;

    private void SetDataMarkerType(ChangeEventArgs args) {
        DataMarkerType = args.Value?.ToString() switch {
            "round" => DefaultDataMarkerTypes.Round,
            "square" => DefaultDataMarkerTypes.Square,
            "cross" => CrossDataMarkerShape.Delegate,
            _ => throw new NotImplementedException()
        };
    }
}