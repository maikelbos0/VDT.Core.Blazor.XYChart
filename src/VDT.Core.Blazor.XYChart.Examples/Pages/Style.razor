@page "/Style"
@using VDT.Core.Blazor.XYChart.Shapes;

<h1>Style</h1>

<p>
    Since the chart is rendered as SVG, each chart element is fully customizable using the powerful SVG options in CSS. Each element type can be referenced
    using the below CSS classes. The chart itself can be referenced with the CSS class <code>svg.chart-main</code>. Aside from the default CSS classes, it
    is also possible to assign each data series its own custom CSS class using the <code>CssClass</code> parameter.
</p>

<ul>
    <li>
        Plot area: <code>.plot-area</code>; please note that this shape is inverted so that it covers chart data elements that would otherwise extend into
        the rest of the canvas
    </li>
    <li>Grid lines: <code>.grid-line</code></li>
    <li>
        Axes:
        <ul>
            <li>X-axis labels: <code>.x-axis-label</code></li>
            <li>Y-axis labels: <code>.y-axis-label</code></li>
            <li>Y-axis multiplier: <code>.y-axis-multiplier</code></li>
        </ul>
    </li>
    <li>
        Data: <code>.data</code>
        <ul>
            <li>Area data: <code>.data.area-data</code></li>
            <li>Bar data: <code>.data.bar-data</code></li>
            <li>Line data: <code>.data.line-data</code></li>
        </ul>
    </li>
    <li>
        Data markers for line data: <code>.data-marker</code>
        <ul>
            <li>Round data markers: <code>.data-marker.data-marker-round</code></li>
            <li>Square data markers: <code>.data-marker.data-marker-square</code></li>
        </ul>
    </li>
    <li>
        Data labels: <code>.data-label</code>
        <ul>
            <li>Positive values (including 0) also get the attribute <code>data-positive</code></li>
            <li>Negative values (including 0) also get the attribute <code>data-negative</code></li>
        </ul>
    </li>
</ul>

<p>
    Below example contains custom styling for each available element and a custom CSS class for several data series. Please note that because this example uses
    Blazor CSS isolation on a child component, the <code>::deep</code> pseudo-element is used and the chart component must be inside an HTML element that the
    isolation attribute will be applied to. See the <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor/components/css-isolation">Microsoft
    documentation on Blazor CSS isolation</a> for more information.
</p>

<p>
    The chart also allows you to add SVG elements or other custom content as part of the <code>ChildContent</code>. This content is always rendered last, which
    means custom content will be rendered top-most in the chart SVG.
</p>

<p>
    The axis labels, data labels and y-axis multiplier only get positioned with a single x/y coordinate as an anchor, so horizontal and vertical aligning, 
    rotation and any other positional transforming should be done with CSS. In the below chart example the anchors of these elements are made visible with red 
    crosses.
</p>

<p>
    Styles that are not universal, such as the color for a data series, the marker size for a line layer, or the gap width for a bar layer, can be set on the 
    various chart objects themselves. For more information, see the menu items for the various layer types.
</p>

<div class="d-inline-block">
    <XYChart @ref="Chart" Labels="ExampleData.Labels">
        @if (Chart != null) {
            foreach (var coordinates in GetAnchorCoordinates()) {
                <line x1="@(coordinates.Item1 - 10)" y1="@coordinates.Item2" x2="@(coordinates.Item1 + 10)" y2="@coordinates.Item2" class="anchor-marker"></line>
                <line x1="@coordinates.Item1" y1="@(coordinates.Item2 - 10)" x2="@coordinates.Item1" y2="@(coordinates.Item2 + 10)" class="anchor-marker"></line>
            }
        }

        <PlotArea Multiplier="1000" />
        <AreaLayer>
            @foreach (var data in ExampleData.AreaData) {
                <DataSeries Name="@data.Name" Color="@data.Color" DataPoints="data.DataPoints" />
            }
        </AreaLayer>
        <BarLayer ShowDataLabels="true">
            @{
                var emphasized = false;

                foreach (var data in ExampleData.BarData) {
                    <DataSeries Name="@data.Name" Color="@data.Color" DataPoints="data.DataPoints" CssClass="@(emphasized ? "emphasized" : "")" />

                    emphasized = !emphasized;
                }
            }
        </BarLayer>
        <LineLayer>
            @{
                var emphasized = false;

                foreach (var data in ExampleData.LineData) {
                    <DataSeries Name="@data.Name" Color="@data.Color" DataPoints="data.DataPoints" CssClass="@(emphasized ? "emphasized" : "")" />

                    emphasized = !emphasized;
                }
            }
        </LineLayer>
    </XYChart>

    <div class="text-end">
        (<a href="/SourceData">source data</a>)
    </div>
</div>

@code {
    private XYChart? Chart { get; set; }

    private IEnumerable<(int, int)> GetAnchorCoordinates() {
        if (Chart != null) {
            foreach (var shape in Chart.GetYAxisLabelShapes()) {
                yield return ((int)shape.X, (int)shape.Y);
            }

            if (Chart.GetYAxisMultiplierShape() is YAxisMultiplierShape multiplierShape) {
                yield return ((int)multiplierShape.X, (int)multiplierShape.Y);
            }

            foreach (var shape in Chart.GetXAxisLabelShapes()) {
                yield return ((int)shape.X, (int)shape.Y);
            }

            foreach (var shape in Chart.GetDataLabelShapes()) {
                yield return ((int)shape.X, (int)shape.Y);
            }
        }
    }
}